# Deployment Workflow: Backend + Frontend (medio-backend + medio-react-app)
#
# This workflow deploys BOTH backend and frontend to Fly.io.
# Backend deploys FIRST to ensure API endpoints are available before frontend.
#
# See: specs/003-specify-scripts-bash/DEPLOYMENT.md for full deployment guide
#
# Triggered by: Push to master/main branches
# Deploys to: 
#   - Backend: medio-backend.fly.dev/api
#   - Frontend: medio-react-app.fly.dev
# Duration: ~7-10 minutes (backend + frontend in sequence)

name: Deploy to Fly.io

on:
  push:
    branches: [master, main, feature/fly-io-deployment]
  workflow_dispatch:

jobs:
  # ============================================
  # JOB 1: BACKEND DEPLOYMENT
  # ============================================
  deploy-backend:
    name: Deploy Backend to Fly.io
    runs-on: ubuntu-latest
    concurrency: deploy-backend-group

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: npm ci --legacy-peer-deps

      # Temporarily disabled - tests need environment setup
      # - name: Run backend tests
      #   working-directory: backend
      #   run: npm test -- --ci --coverage --watchAll=false

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Backend to Fly.io
        working-directory: backend
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Backend Health check
        run: |
          sleep 10
          curl -f https://medio-backend.fly.dev/api/health || echo "Backend health check failed - site may still be starting up"

      - name: Verify backend deployment
        run: |
          echo "üîç Verifying backend deployment..."

          # Test 1: Check /api/health endpoint
          HEALTH_STATUS=$(curl -s https://medio-backend.fly.dev/api/health | grep -o '"status":"healthy"')
          if [ -n "$HEALTH_STATUS" ]; then
            echo "‚úÖ Backend health check passed"
          else
            echo "‚ùå FAIL: Backend health check failed"
            exit 1
          fi

          # Test 2: Check /api/platforms endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://medio-backend.fly.dev/api/platforms)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Backend /api/platforms returns HTTP 200"
          else
            echo "‚ùå FAIL: Backend returned HTTP $HTTP_CODE"
            exit 1
          fi

          echo "‚úÖ Backend deployment verification passed"

  # ============================================
  # JOB 2: FRONTEND DEPLOYMENT
  # ============================================
  deploy-frontend:
    name: Deploy Frontend to Fly.io
    runs-on: ubuntu-latest
    needs: deploy-backend  # Wait for backend to finish first
    concurrency: deploy-frontend-group

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # Temporarily disabled - tests need environment setup
      # - name: Run tests
      #   run: npm test -- --ci --coverage --watchAll=false

      - name: Build application
        run: npm run build

      - name: Setup flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Frontend to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Frontend Health check
        run: |
          sleep 10
          curl -f https://medio-react-app.fly.dev || echo "Frontend health check failed - site may still be starting up"

      - name: Verify frontend deployment
        run: |
          echo "üîç Verifying frontend deployment..."

          # Test 1: Check index.html cache headers
          CACHE_HEADER=$(curl -sI https://medio-react-app.fly.dev/index.html | grep -i "cache-control")
          echo "index.html cache header: $CACHE_HEADER"

          if echo "$CACHE_HEADER" | grep -qi "no-cache"; then
            echo "‚úÖ index.html has no-cache headers"
          else
            echo "‚ùå FAIL: index.html missing no-cache headers"
            echo "Expected: Cache-Control: no-cache, no-store, must-revalidate"
            exit 1
          fi

          # Test 2: Verify site loads
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://medio-react-app.fly.dev)
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Frontend returns HTTP 200"
          else
            echo "‚ùå FAIL: Frontend returned HTTP $HTTP_CODE"
            exit 1
          fi

          echo "‚úÖ Frontend deployment verification passed"
